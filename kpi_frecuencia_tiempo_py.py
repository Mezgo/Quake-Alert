# -*- coding: utf-8 -*-
"""KPI_frecuencia_tiempo.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P-6IZ-K1CF8Uk3kHAdIByrhq_rJ6ShPP
"""

import pandas as pd
import numpy as np
import requests                     
from datetime import datetime
import matplotlib.pyplot as plt    
import seaborn as sns              
import datetime

"""KPI Frecuencia: con este KPI buscamos ver si hay una relacion entre el tiempo que pasa sin haber sismos y la magnitud de los mismos. El estudio se hizo con los datos desde enero 2023 hasta 15 de mayo 2023. la magnitud de los sismos estudiados son de 6 grados en richer a menos de 70 km de profundidad.

probar con unir fecha y hora
"""

df_fh.to_csv('chileFrec.csv')

df_fh = chile.copy()

df_fh['fecha_hora'] = pd.to_datetime(df_fh['fecha_local'] + ' ' + df_fh['hora_local'])

df_fh.drop(columns=['fecha_local','hora_local'], inplace=True)

df_fh.sort_values(by='fecha_hora', ascending=True, inplace=True)

df_fh['diferencia_tiempo'] = df_fh['fecha_hora'].diff()


#from google.colab import files
#files.download('chileFrec.csv')

filtered_df = df_fh[(df_fh['magnitud'] > 6) & (df_fh['profundidad'] < 70)]
filtered_df['dif_tiempo'] = filtered_df['fecha_hora'].diff()

df_dif = df_fh.copy()
filtered_df = df_dif[(df_dif['magnitud'] > 6) & (df_dif['profundidad'] < 70)]
filtered_df['dif_tiempo'] = filtered_df['fecha_hora'].diff()

#filtro['diferencia_tiempo'] = filtro['fecha_hora'].diff()
filtered_df

filtered_df.describe()

"""Aca podemos concluir para los sismos de 6 grados en adelante y a menos de 70 km de profundidad que han ocurrido 22 desde comienzo de año 2023 hasta 15 de mayo del mismo año, el de mayor magnitud fue de 7.8 grados en escala de Richer y hacia mas de 18 días que no se producia un sismo de ese nivel de magnitud los cuales son considerados graves.

Graficamos
"""

import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
from datetime import timedelta

# Crear una lista de colores rojos en un degradado
colormap = plt.cm.get_cmap('Reds')
normalize = mcolors.Normalize(vmin=6, vmax=8)  # Rango de magnitudes

# Configurar el tamaño del gráfico
plt.figure(figsize=(10, 6))

# Convertir la diferencia de tiempo a días
dif_tiempo_dias = filtered_df['dif_tiempo'] / timedelta(days=1)

# Generar el gráfico de dispersión
scatter = plt.scatter(dif_tiempo_dias, filtered_df['magnitud'], c=filtered_df['magnitud'], cmap=colormap, norm=normalize)

# Añadir una barra de colores
cbar = plt.colorbar(scatter)
cbar.set_label('Magnitud')

# Configurar los ejes y etiquetas
plt.xlabel('Diferencia de tiempo (días)')
plt.ylabel('Magnitud')
plt.title('Relación entre magnitud y diferencia de tiempo de sismos seleccionados')

# Mostrar el gráfico
plt.show()

import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
from datetime import timedelta

# Crear una lista de colores rojos en un degradado
colormap = plt.cm.get_cmap('Reds')
normalize = mcolors.Normalize(vmin=6, vmax=8)  # Rango de magnitudes

# Configurar el tamaño del gráfico
plt.figure(figsize=(10, 6))

# Convertir la diferencia de tiempo a días
dif_tiempo_dias = filtered_df['dif_tiempo'] / timedelta(days=1)

# Calcular las posiciones de las barras
x_pos = range(len(filtered_df))

# Graficar las barras de magnitud
plt.bar(x_pos, filtered_df['magnitud'], color=colormap(normalize(filtered_df['magnitud'])))

# Configurar los ejes y etiquetas
plt.xlabel('Diferencia de tiempo (días)')
plt.ylabel('Magnitud')
plt.title('Magnitud de sismos seleccionados')
plt.xticks(x_pos, dif_tiempo_dias, rotation=90)

# Añadir una barra de colores
cbar = plt.colorbar(label='Magnitud')

# Mostrar el gráfico
plt.show()






"""KPI en que estacion del año se generan mas sismos"""

# Define los parámetros de la consulta
params = {
    "format": "geojson",
    "starttime": "2022-01-01",
    "endtime": "2023-01-01",
    "minmagnitude": 6
    
}

# Hacer una solicitud HTTP a la API con los parámetros de consulta
response = requests.get("https://earthquake.usgs.gov/fdsnws/event/1/query", params=params)

# Obtener la respuesta en formato JSON
data = response.json()

# Crear un DataFrame con los datos relevantes
chile22_6 = pd.DataFrame(
    [
        [
            feature["properties"]["mag"],
            feature["geometry"]["coordinates"][0],
            feature["geometry"]["coordinates"][1],
            feature["geometry"]["coordinates"][2],
            pd.to_datetime(feature["properties"]["time"], unit="ms").date(),
            pd.to_datetime(feature["properties"]["time"], unit="ms").time()
        ]
        for feature in data["features"]
    ],
    columns=["magnitud", "longitud", "latitud", "profundidad", "fecha_local", "hora_local"]
)

chile22_6

chile22_6.to_csv('chileEstacion22.csv')

from google.colab import files
files.download('chileEstaciones22.csv')

chile22_6.head(3)

sismos_por_estacion

import pandas as pd
import matplotlib.pyplot as plt
#chile22_6['fecha_local'] = pd.to_datetime(chile22_6['fecha_local'])

# Calcular la cantidad de sismos por estación del año
chile22_6['estacion'] = chile22_6['fecha_local'].dt.to_period('Q').dt.strftime('%b')

sismos_por_estacion = chile22_6['estacion'].value_counts()

# Ordenar las estaciones del año en orden cronológico
estaciones_ordenadas = ['Dec', 'Mar', 'Jun', 'Sep']

# Mapeo de colores por estación del año
colores = {'Dec': 'orange', 'Mar': 'yellow', 'Jun': 'blue', 'Sep': 'green'}

# Mapeo de etiquetas por estación del año
etiquetas = {'Dec': 'Verano', 'Mar': 'Otoño', 'Jun': 'Invierno', 'Sep': 'Primavera'}

# Crear un DataFrame con los datos de cantidad de sismos por estación del año
kpi_sismos_estaciones = pd.DataFrame({
    'Estacion': estaciones_ordenadas,
    'Cantidad de Sismos': [sismos_por_estacion[estacion] for estacion in estaciones_ordenadas]
})

# Configurar el tamaño del gráfico
plt.figure(figsize=(10, 6))

# Graficar las barras de cantidad de sismos por estación del año con colores personalizados
plt.bar(kpi_sismos_estaciones['Estacion'], kpi_sismos_estaciones['Cantidad de Sismos'],
        color=[colores[estacion] for estacion in kpi_sismos_estaciones['Estacion']])

# Configurar los ejes y etiquetas
plt.xlabel('Estación del Año')
plt.ylabel('Cantidad de Sismos')
plt.title('Cantidad de Sismos por Estación del Año')

# Cambiar las etiquetas en el eje x por nombres de estaciones
plt.xticks(kpi_sismos_estaciones['Estacion'], [etiquetas[estacion] for estacion in kpi_sismos_estaciones['Estacion']])

# Mostrar el gráfico
plt.show()

# Obtener la estación del año con la mayor cantidad de sismos
estacion_max_sismos = sismos_por_estacion.idxmax()
cantidad_max_sismos = sismos_por_estacion.max()

# Configurar el tamaño del gráfico
plt.figure(figsize=(10, 6))

# Graficar las barras de cantidad de sismos por estación del año con colores personalizados
plt.bar([etiquetas[estacion] for estacion in estaciones_ordenadas], kpi_sismos_estaciones['Cantidad de Sismos'],
        color=[colores[estacion] for estacion in estaciones_ordenadas])

# Configurar los ejes y etiquetas
plt.xlabel('Estación del Año')
plt.ylabel('Cantidad de Sismos')
plt.title('Cantidad de Sismos por Estación del Año')

# Mostrar el valor del KPI en el gráfico
plt.annotate(f"{etiquetas[estacion_max_sismos]} ({cantidad_max_sismos} sismos)",
             xy=(etiquetas[estacion_max_sismos], cantidad_max_sismos),
             xytext=(10, 10),
             textcoords="offset points",
             ha='center',
             va='center',
             fontsize=12,
             color='black',
             arrowprops=dict(arrowstyle="->"))

# Mostrar el gráfico
plt.show()

"""Aca se puede observar que en el año 2022 hubieron mas sismos de 6 grados en adelante en otoño.Por lo que nos indicaría que en esa época se debería incrementar las alertas de prevención sismica.

Ahora Analisamos año 2021 para comparar si sigue la misma tendencia
"""

# Define los parámetros de la consulta
params = {
    "format": "geojson",
    "starttime": "2021-01-01",
    "endtime": "2022-01-01",
    "minmagnitude": 6
    
}

# Hacer una solicitud HTTP a la API con los parámetros de consulta
response = requests.get("https://earthquake.usgs.gov/fdsnws/event/1/query", params=params)

# Obtener la respuesta en formato JSON
data = response.json()

# Crear un DataFrame con los datos relevantes
chile21_6 = pd.DataFrame(
    [
        [
            feature["properties"]["mag"],
            feature["geometry"]["coordinates"][0],
            feature["geometry"]["coordinates"][1],
            feature["geometry"]["coordinates"][2],
            pd.to_datetime(feature["properties"]["time"], unit="ms").date(),
            pd.to_datetime(feature["properties"]["time"], unit="ms").time()
        ]
        for feature in data["features"]
    ],
    columns=["magnitud", "longitud", "latitud", "profundidad", "fecha_local", "hora_local"]
)

chile21_6.info()

sismos_por_estacion22_6

chile21_6['fecha_local'] = pd.to_datetime(chile21_6['fecha_local'])

# Calcular la cantidad de sismos por estación del año
chile21_6['estacion'] = chile21_6['fecha_local'].dt.to_period('Q').dt.strftime('%b')

sismos_por_estacion22_6 = chile21_6['estacion'].value_counts()

# Ordenar las estaciones del año en orden cronológico
estaciones_ordenadas = ['Dec', 'Mar', 'Jun', 'Sep']

# Mapeo de colores por estación del año
colores = {'Dec': 'orange', 'Mar': 'yellow', 'Jun': 'blue', 'Sep': 'green'}

# Mapeo de etiquetas por estación del año
etiquetas = {'Dec': 'Verano', 'Mar': 'Otoño', 'Jun': 'Invierno', 'Sep': 'Primavera'}

# Crearkpi_sismos_estaciones22_6  un DataFrame con los datos de cantidad de sismos por estación del año
KPI21= pd.DataFrame({
    'Estacion': estaciones_ordenadas,
    'Cantidad de Sismos': [sismos_por_estacion[estacion] for estacion in estaciones_ordenadas]
})

# Configurar el tamaño del gráfico
plt.figure(figsize=(10, 6))

# Graficar las barras de cantidad de sismos por estación del año con colores personalizados
plt.bar(KPI21['Estacion'], KPI21['Cantidad de Sismos'],
        color=[colores[estacion] for estacion in KPI21['Estacion']])

# Configurar los ejes y etiquetas
plt.xlabel('Estación del Año')
plt.ylabel('Cantidad de Sismos')
plt.title('Cantidad de Sismos por Estación del Año')

# Cambiar las etiquetas en el eje x por nombres de estaciones
plt.xticks(KPI21['Estacion'], [etiquetas[estacion] for estacion in KPI21['Estacion']])

# Mostrar el gráfico
plt.show()

"""Podemos concluir que comparando dos años 2021 la estacion del año que mas sismo hay es en otoño, verano

KPI
"""